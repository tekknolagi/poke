#!@SHELL_OR_BIN_SH@
## An -*- sh -*- script (to be preprocessed by M4sh and then by config.status:
## if the file extension of this file is not .in.m4sh then you are not looking
## at the actual source), part of Jitter.

## Print configuration info about Jitter and compiler/linker flags to be used
## for code generated by Jitter.

## Copyright (C) 2017 Luca Saiu
## Written by Luca Saiu

## This file is part of Jitter.

## Jitter is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## Jitter is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with Jitter.  If not, see <http://www.gnu.org/licenses/>.


# M4sh initialization.
################################################################

# Include the M4sh script "library", part of every M4sh script here.  That
# library starts with the AS_INIT call.
m4_include([jitter-script.m4sh])


# Global settings and main variables.
################################################################

# The actually used name for this script.
script_name="$0"

# By default argp generates a --help text with section heading starting at the
# second column.  This doesn't play well with help2man, and while with argp I
# can use the environment setting ARGP_HELP_FMT='header-col=0' to override the
# look when calling help2man, here I can't.  So I'll set an indentation string
# to "" by default.
# Changing to the default argp look entails setting the variable to " ".  This
# script is not worth the trouble of really emulating argp's behavior with
# respect to the environment.
help_section_indentation=""

# Path definitions.  These have to be kept in sync with the ones at the
# beginning of Makefile.am ; see the comment there about the reason why
# they are just all set with AC_SUBST by configure .
prefix="@prefix@"
exec_prefix="@exec_prefix@"
datarootdir="@datarootdir@"
includedir="@prefix@/include/jitter"
flagdir="@exec_prefix@/@JITTER_FLAG_SUBDIRECTORY@"
templatedir="@datarootdir@/@JITTER_TEMPLATE_SUBDIRECTORY@"

#####################
### FIXME: remove
set -e
# echo prefix is $prefix
# echo exec_prefix is $exec_prefix
# echo datadir is $datadir
# echo includedir is $includedir
# echo flagdir is $flagdir
# echo templatedir is $templatedir
####################


# Functions for printing information.
################################################################

# According to the Autoconf manual using echo with an argument starting with a
# dash is a common source of problems.  This crude replacement seems good
# enough.
my_echo ()
{
    cat <<EOF
$@
EOF
}


# Functions for printing information and exiting.
################################################################

# Run my_echo with the arguments, then exit with success.
echo_and_exit ()
{
    my_echo $@
    exit 0
}

# Print a usage message and exit with failure, as a response to an incorrect
# command line.  The message to print is the only function argument.
fail_usage ()
{
    message="$1"
    cat <<EOF
$script_name: $1.
Try '$script_name --help' for more information.
EOF
    exit 1
}

# Print a usage message and exit with failure, as a response to a semantic
# problem in the request; for example, demanding CFLAGS for a disabled
# dispatching model.  This is similar to fail_usage , but does not invite the
# user to check --help .
fail_semantic ()
{
    message="$1"
    cat <<EOF
$script_name: $1.
EOF
    exit 1
}

# Print version information and exit with success.
version ()
{
    cat <<EOF
jitter-config (@PACKAGE_NAME@) @PACKAGE_VERSION@
Copyright (C) 2017 Luca Saiu.
Jitter comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of Jitter under the terms of the GNU General Public
License, version 3 or any later version published by the Free Software
Foundation.  For more information see the file named COPYING in the source
distribution.

Written by Luca Saiu <http://ageinghacker.net>.
EOF
    exit 0
}

# Print help information and exit with success.
help ()
{
    cat <<EOF
Usage: jitter-config OPTION @<:@OPTION...@:>@
Print Jitter configuration information and compiler/linker flags to be used
for generated code.

${help_section_indentation}Configuration options:
  --best-dispatch            Print the best enabled dispatching model and
                             exit
  --dispatches               Print all the enabled dispatching models in order
                             of increasing efficiency, all on the same line,
                             and exit
  --has-dispatch=MODEL       Exit immediately, with success if the dispatching
                             model MODEL is enabed, with failure otherwise

${help_section_indentation}Dispatching model selection:
  --dispatch=MODEL           Choose the given dispatching model for the
                             following (default: the best enabled model);
                             see --dispatches for the list of enabled models
                             and --best-dispatch for the best one

${help_section_indentation}Compilation/linking flag options:
  --cflags                   Print C compiler flags for the chosen
                             dispatching model
  --cppflags                 Print C preprocessor flags for the chosen
                             dispatching model
  --ldadd                    Print C compiler (driver) '-l' options for
                             linking the chosen dispatching model library
  --ldflags                  Print C compiler (driver) linking flags for
                             linking the chosen dispatching model library

${help_section_indentation}Installation path options:
  --template-path            Print the directory where template files are
                             installed, then exit
  --flag-path                Print the directory where flag files are
                             installed, containing one subdirectory per
                             dispatching model, then exit
  --include-path             Print the full path of the jitter/ header
                             directory, then exit

${help_section_indentation}Architecture options:
  --build                    Print the system build triplet and exit
  --host                     Print the system host triplet and exit
  --assembly                 Print the Jitter assembly name for the host system, if
                             any, and exit

${help_section_indentation}Debugging and scripting:
  --dump-version             Print the Jitter version only, without any surrounding
                             text; this is convenient for scripts

${help_section_indentation}Common GNU-style options:
  -?, --help                 Give this help list
  -V, --version              Print program version

Only long-format options can have arguments.

Report bugs to: <@PACKAGE_BUGREPORT@>
Jitter home page: <@PACKAGE_URL@>
EOF
# FIXME: add this when/if Jitter is approved as a GNU package.
#     General help using GNU software: <http://www.gnu.org/gethelp/>
    exit 0
}

# Print enabled dispatching models, then exit with success.
dispatches_and_exit ()
{
    # The output should be a single line, which one space separating each
    # dispatching-mode name, and no space at the beginning or the end.
    output=""
    for d in @JITTER_ENABLED_DISPATCHES@; do
        output="$output $d"
    done
    my_echo $output
    exit 0
}

# Print the best enabled dispatching model, then exit with success.
best_dispatch_and_exit ()
{
    my_echo @JITTER_BEST_DISPATCH@
    exit 0
}


# Utility functions for printing.
################################################################

# Print a copy of stdin to stdout, suppressing spaces at the beginning and the
# at the end of lines, and contracting multiple-space sequences into single
# spaces.
# No arguments.
suppress_redundant_spaces ()
{
    sed 's/^ *//;s/ *$//;s/  */ /g'
}

# Append the value of the given option for $model to the output variable.
# One argument: the option name, lower-case.
append_to_output ()
{
    flagname="$1"
    if test "x$dispatch" = "x"; then
        model="@JITTER_BEST_DISPATCH@"
    else
        model="$dispatch"
    fi
    case "$model" in
        switch)
            case "$flagname" in
                cflags) output="@JITTER_SWITCH_CFLAGS@";;
                cppflags) output="@JITTER_SWITCH_CPPFLAGS@";;
                ldadd) output="@JITTER_SWITCH_LDADD@";;
                ldflags) output="@JITTER_SWITCH_LDFLAGS@";;
                *) fail_semantic "impossible: $flagname for $model";;
            esac;;
        direct-threading)
            case "$flagname" in
                cflags) output="@JITTER_DIRECT_THREADING_CFLAGS@";;
                cppflags) output="@JITTER_DIRECT_THREADING_CPPFLAGS@";;
                ldadd) output="@JITTER_DIRECT_THREADING_LDADD@";;
                ldflags) output="@JITTER_DIRECT_THREADING_LDFLAGS@";;
                *) fail_semantic "impossible: $flagname for $model";;
            esac;;
        minimal-threading)
            case "$flagname" in
                cflags) output="@JITTER_MINIMAL_THREADING_CFLAGS@";;
                cppflags) output="@JITTER_MINIMAL_THREADING_CPPFLAGS@";;
                ldadd) output="@JITTER_MINIMAL_THREADING_LDADD@";;
                ldflags) output="@JITTER_MINIMAL_THREADING_LDFLAGS@";;
                *) fail_semantic "impossible: $flagname for $model";;
            esac;;
        no-threading)
            case "$flagname" in
                cflags) output="@JITTER_NO_THREADING_CFLAGS@";;
                cppflags) output="@JITTER_NO_THREADING_CPPFLAGS@";;
                ldadd) output="@JITTER_NO_THREADING_LDADD@";;
                ldflags) output="@JITTER_NO_THREADING_LDFLAGS@";;
                *) fail_semantic "impossible: $flagname for $model";;
            esac;;
        *)
            fail_semantic "this should never happen: model $model";;
    esac
    output="$output $value"
}


# Utility functions for common checks.
################################################################

# Fail with a fatal error if the current value of $option_argument is different
# from "".  This is used from the main loop, after recognizing that the current
# option $option supports no argument.
no_option_argument ()
{
    if test "x$option_argument" != "x"; then
        fail_usage "the option $option has no argument"
    fi
}

# Fail with a fatal error if the current value of $option_argument is "".  This
# is used from the main loop, after recognizing that the current option $option
# requires a mandatory argument.
mandatory_option_argument ()
{
    if test "x$option_argument" = "x"; then
        fail_usage "the option $option has a mandatory argument"
    fi
}


# Command-line checks.
################################################################

# Fail if there are no command-line arguments.
if test "$#" = "0"; then
    fail_usage "no option given"
fi


# Main loop.
################################################################

# Initialize a string containing the output to be printed in the end.
output=""

# Scan every option left-to-right.
while test "$#" != "0"; do
    argument="$1"
    shift

    # Fail if the argument is not an option.
    if ! (my_echo "$argument" | grep -q '^-'); then
        fail_usage "$argument is a non-option argument"
    fi

    # At this point $argument is either an option or an option with an argument.
    # Split the two parts.
    if my_echo "$argument" | grep -q '='; then
        # There is an option argument.  Split around the '=' character.
        # Notice that arguments with options only support the GNU-style syntax
        # --long-option=value ; the '=' character is part of $argument .  Short
        # options cannot have arguments here.
        option="$(my_echo $argument | sed 's/=.*$//')"
        option_argument="$(my_echo $argument | sed 's/^@<:@^=@:>@*=//')"
    else
        # There is no argument.
        option="$argument"
        option_argument=""
    fi

    case "$option" in
        # Configuration options
        --best-dispatch)
            no_option_argument
            best_dispatch_and_exit;;
        --dispatches)
            no_option_argument
            dispatches_and_exit;;
        --has-dispatch)
            mandatory_option_argument
            for m in @JITTER_ENABLED_DISPATCHES@; do
                if test "x$option_argument" = "x$m"; then
                    exit 0
                fi
            done
            exit 1;;

        # Dispatching model selection:
        --dispatch)
            mandatory_option_argument
            known="no"
            for m in @JITTER_ENABLED_DISPATCHES@; do
                if test "x$option_argument" = "x$m"; then
                    known="yes"
                fi
            done
            if test "x$known" != "xyes"; then
                fail_semantic "unknown or disabled dispatching model \"$option_argument\""
            fi
            dispatch="$option_argument"
            ;;

        # Compilation/linking flag options for the best dispatching model:
        --cflags)
            no_option_argument
            append_to_output cflags;;
        --cppflags)
            no_option_argument
            append_to_output cppflags;;
        --ldadd)
            no_option_argument
            append_to_output ldadd;;
        --ldflags)
            no_option_argument
            append_to_output ldflags;;

        # Installation path options.
        --template-path)
            no_option_argument
            echo_and_exit "$templatedir";;
        --flag-path)
            no_option_argument
            echo_and_exit "$flagdir";;
        --include-path)
            no_option_argument
            echo_and_exit "$includedir";;

        # Architecture options.
        --host)
            no_option_argument
            echo_and_exit "@host@";;
        --build)
            no_option_argument
            echo_and_exit "@build@";;
        --assembly)
            no_option_argument
            if test "x@JITTER_ASSEMBLY_SUBDIRECTORY@" != "x"; then
                my_echo "@JITTER_ASSEMBLY_SUBDIRECTORY@"
            fi
            exit 0;;

        # Debugging and scripting options.
        --dump-version)
            no_option_argument
            echo_and_exit "@PACKAGE_VERSION@";;

        # Common GNU-style options.
        --version|-V)
            no_option_argument
            version;;
        --help|-\?)
            no_option_argument
            help;;

        # Unrecognized option.
        *)
            fail_usage "invalid option $option"
            ;;
    esac
done

# If we've not exited yet, we have composed an output to be printed at the end
# at this point.  Do that and we can exit with success.
# Here we suppress redundant spaces.
my_echo "$output" | suppress_redundant_spaces
