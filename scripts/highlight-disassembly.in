#!@SHELL@
## A utility -*- sh -*- filter highlighting disassembled code with ANSI escapes
## Copyright (C) 2017 Luca Saiu
## Written by Luca Saiu

## This file is part of Jitter.

## Jitter is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## Jitter is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with Jitter.  If not, see <http://www.gnu.org/licenses/>.


# Warnings.
# ################################################################


# This filter script is just provided as a convenience for debugging.  It makes
# no serious attempt at being portable, and may rely on the GNU utilities.  It
# accepts no arguments.

# The intended way of using the script is as the last stage of a shell pipeline,
# filtering the output of a Jitter VM program which is disassembling code.


# Terminal escape sequence definitions.
# ################################################################

ESC=$(echo -e '\033')

BLACK=$ESC[0m$ESC[30m
BLUE=$ESC[0m$ESC[34m
GREEN=$ESC[0m$ESC[32m
CYAN=$ESC[0m$ESC[36m
RED=$ESC[0m$ESC[31m
MAGENTA=$ESC[0m$ESC[35m
BROWN=$ESC[0m$ESC[33m
LIGHTGRAY=$ESC[0m$ESC[37m
DARKGRAY=$ESC[1m$ESC[30m
LIGHTBLUE=$ESC[1m$ESC[34m
LIGHTGREEN=$ESC[1m$ESC[32m
LIGHTCYAN=$ESC[1m$ESC[36m
LIGHTRED=$ESC[1m$ESC[31m
LIGHTMAGENTA=$ESC[1m$ESC[35m
YELLOW=$ESC[1m$ESC[33m
WHITE=$ESC[1m$ESC[37m

NOATTR=$ESC[0m

BOLD=$ESC[1m
FAINT=$ESC[2m
ITALIC=$ESC[3m
CROSSOUT=$ESC[9m
UNDERLINE=$ESC[4m

export REVERSE=$ESC[7m
# Depending on the terminal BLINK could brighten the background
export SLOWBLINK=$ESC[5m

# Unsupported on all the terminals I've tried:
export FASTBLINK=$ESC[6m
export FRAME=$ESC[51m
export ENCIRCLE=$ESC[52m
export OVERLINE=$ESC[53m

export CLEAR=$ESC[2J
export TOPLEFT=$ESC[1\;1H

# This is for setting the title of an Xterm window:
export BEGINTITLE=\\033]0;
export ENDTITLE=\\007


# Define which attributes are to be used for highlighting.
# ################################################################

# Specialized instructions and threads.
SPECIALIZED="$YELLOW"

# Native instruction address.
ADDRESS="$LIGHTMAGENTA"

# Native instruction hexadecimal encoding.
INSTRUCTION="$LIGHTGREEN"

# Disassembled native instructions.
DISASSEMBLY="$LIGHTCYAN"


# Define sed commands.
# ################################################################

# I can easily insert, display and edit tab characters in the source code with
# Emacs, but inferior editors will have problem showing it.  Let's define a
# shell variable just for other people's sake.
TAB=$(echo -e '\011')

# Match entire lines starting with '#'; those contain specialized instructions,
# with threads and arguments.
COMMAND_SPECIALIZED="s/^\\(#.*\\)\$/${SPECIALIZED}\\1${NOATTR}/g"

# Filter out space characters immediately preceding a tab character.  This lets
# me remove one redundant space at the end of the instruction encoding as
# displayed by objdump.
REMOVE_SPACES_BEFORE_TAB="s/ *${TAB}/${TAB}/g"

# Match the more complex disassembly lines, in the format generated by objdump
# --disassembly (and my own compatibile fallback hexadecimal dumper).
# Each of these line starts indented with spaces (filtered out); then, in order:
# * the native instruction address (the initial "0x" is filtered out);
# * the instruction hexadecimal encoding, possibly with bytes separated by
#   spaces (on some architectures), and possibly with a final space;
# * the instruction disassembly, preceded by a tab.
COMMAND_NOT_SPECIALIZED="s/^\\(  *\\)\\?\\(0x\\)\\?\\([0-9a-f]*\\):\\?\\( *\\)\\([^${TAB}]*\\)\\t\\(.*\\)\$/${ADDRESS}\\3${NOATTR}${TAB}${INSTRUCTION}\\5${NOATTR}${TAB}${DISASSEMBLY}\\6${NOATTR}/g"

# Replace sequences of multiple whitespace characters containing a tab with a
# single tab.  Replace multiple consecutive spaces with a single space.
NORMALIZE_WHITESPACE="s/ *${TAB} */${TAB}/g;s/  */ /g"

# Replace the first two tabs in each line with a space (to keep the address and
# instruction encoding visually close in each disassembly line) and an otherwise
# unused character, respectively; then replace any remaining tab with a space
# (this removes any tab in the disassembly part, making it narrower); replace
# back any occurrence of the unused character with a tab, to restore the visual
# separation between instruction encoding and disassembly.
UNUSED=$(echo -e '\a')
NORMALIZE_TABS="s/^\\([^${TAB}]*\\)${TAB}\\([^${TAB}]*\\)${TAB}\\(.*\\)\$/\\1 \\2${UNUSED}\\3/g;s/${TAB}/ /g;s/${UNUSED}/${TAB}/g"


# Run a sed program obtained by concatenating commands.
# ################################################################

# Read on stdin, write on stdout.
@SED@ \
  "${REMOVE_SPACES_BEFORE_TAB};
   ${COMMAND_SPECIALIZED};
   ${COMMAND_NOT_SPECIALIZED};
   ${NORMALIZE_WHITESPACE};
   ${NORMALIZE_TABS}"
