/* dwarf-eh-frame-hdr.pk - EH_FRAME header imlementation for GNU poke.
		     Index for Unwind Information.  */

/* Copyright (C) 2022 Oracle Inc.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* DWARF .eh_frame Personality Encoding types.  */
var DW_EH_PE_absptr = 0x00,
    DW_EH_PE_omit = 0xff,
    DW_EH_PE_uleb128 = 0x01,
    DW_EH_PE_udata2 = 0x02,
    DW_EH_PE_udata4 = 0x03,
    DW_EH_PE_udata8 = 0x04,
    DW_EH_PE_signed = 0x08,
    DW_EH_PE_sleb128 = 0x09,
    DW_EH_PE_sdata2 = 0x0a,
    DW_EH_PE_sdata4 = 0x0b,
    DW_EH_PE_sdata8 = 0x0c,
    DW_EH_PE_pcrel = 0x10,
    DW_EH_PE_textrel = 0x20,
    DW_EH_PE_datarel = 0x30,
    DW_EH_PE_funcrel = 0x40,
    DW_EH_PE_aligned = 0x50,
    DW_EH_PE_indirect = 0x80;

type Dwarf_Eh_Frame_Hdr_Index_Entry =
  struct
  {
    uint<32> addr;
    uint<32> fde_offset;
  };


type Dwarf_Eh_Frame_Hdr_Section =
  struct
  {
    byte eh_frame_hdr_version;
    byte offset;
    byte fde_encoding : fde_encoding in [DW_EH_PE_udata4, DW_EH_PE_omit];
    byte search_table_encoding : search_table_encoding in [(DW_EH_PE_datarel | DW_EH_PE_sdata4), DW_EH_PE_omit];
    uint<32> encoded_eh_frame;
    /* Optionally followed by:
     * fde_count          (total number of FDEs in .eh_frame section)
     * fde_count x [encoded] initial_loc, fde address (sorted on initial_loc)
     */
    union
      {
	uint<32> fde_count : fde_encoding != DW_EH_PE_omit;
	struct {} nothing : fde_encoding == DW_EH_PE_omit;
      } count;
    union
      {
	Dwarf_Eh_Frame_Hdr_Index_Entry[] eh_frame_hdr_entries : fde_encoding != DW_EH_PE_omit;
	struct {} nothing : fde_encoding == DW_EH_PE_omit;
      } entries;
  };


/* Delete these dumping functions.  */

fun dwarf_eh_frame_dump_index_addr = (Dwarf_Eh_Frame_Hdr_Section eh_frame_hdr) void:
{
  var i = 0;
  for (ent in eh_frame_hdr.entries.eh_frame_hdr_entries)
    printf ("%u32d:   %v \n", i++, ent.addr);
}
