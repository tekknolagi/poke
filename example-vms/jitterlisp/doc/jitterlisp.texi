\input texinfo.tex @c This is -*- Texinfo -*-.

@c This file is part of the JitterLisp manual, which is part of Jitter.
@c Copyright (C) 2017, 2018  Luca Saiu
@c Written by Luca Saiu

@c Permission is granted to copy, distribute and/or modify this
@c document under the terms of the GNU Free Documentation License,
@c Version 1.3 or any later version published by the Free Software
@c Foundation; with no Invariant Sections, no Front-Cover Texts, and
@c no Back-Cover Texts.  A copy of the license is included in the
@c section entitled ``GNU Free Documentation License''.


@c Conditionals
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@c @set this if building a preview for myself rather than a nice clean manual
@c to be distributed.
@c @set preview

@c @set This if I decide to include license texts.  It will look silly unless
@c the manual is long.
@c @set includelicenses


@c Index settings which must come early
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@c Define a symbol index, with entries typeset in @code .
@defcodeindex sy

@c @c Add index entries for symbols to the concept index as well.
@c @syncodeindex sy cp


@c File name and title
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@setfilename jitterlisp.info
@include version-jitterlisp.texi
@settitle JitterLisp @value{VERSION}


@c Global settings
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@syncodeindex pg cp
@documentencoding UTF-8

@ignore
@fonttextsize 10
@afivepaper
@smallbook
@c @pagesizes 200mm,100mm
@c @cropmarks
@end ignore

@c This is for production of a nice manual; I might want to enable it
@c when the actual manual is written.  The default (start chapters on
@c pages of any parity) looks less nice.
@ifclear preview
@setchapternewpage odd
@end ifclear @c preview

@c This come in handy for private testing printouts.
@ifset preview
@setchapternewpage off
@end ifset @c preview

@c Information for the Info directory
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@dircategory Programming
@direntry
* The JitterLisp manual: (jitterlisp).  An efficient Lisp system using a Jittery VM.
* @command{jitterlisp}:  (jitterlisp).  Invoking @command{jitterlisp}.
@end direntry


@c Macros
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@iftex
@macro epsilonsubscript{subscript}
@inlineraw{tex,$@varepsilon_{\subscript\}$}@inlineraw{tex,{}}
@end macro
@end iftex

@ifnottex
@ifhtml
@macro epsilonsubscript{subscript}
@inlineraw{html,&epsilon;<sub>\subscript\</sub>}
@end macro
@end ifhtml
@ifnothtml
@macro epsilonsubscript{subscript}
epsilon\subscript\
@end macro
@end ifnothtml
@end ifnottex

@macro epsilonzero{}
@epsilonsubscript{0}
@end macro

@macro epsilonone{}
@epsilonsubscript{1}
@end macro

@rmacro fixme{text}
@strong{[@emph{FIXME}: \text\]}
@end rmacro

@rmacro rephrase{text}
@strong{[@emph{REPHRASE}: \text\]}
@end rmacro


@c Copying conditions
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@copying
This is the manual for JitterLisp
@c (edition @value{EDITION} for
(version @value{VERSION},
last updated on @value{UPDATED}), an efficient Lisp system using a Jittery VM.

Copyright @copyright{} 2018  Luca Saiu.  Written by Luca Saiu.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation;
@ifset includelicenses
  with the Invariant Sections being ``GNU General Public License'' and
  ``GNU Free Documentation License'',
@end ifset @c includelicenses
with no Front-Cover texts and with the Back-Cover text being
``@emph{You have freedom to copy and modify this manual, like GNU
software.}''.

A copy of the GNU Free Documentation License is
@ifset includelicenses
  included in this book in the appendix entitled ``GNU Free
  Documentation License'', and the license text is also
@end ifset @c includelicenses
distributed in electronic form along with the software in the file
@file{doc/COPYING.DOC} and available on the web at the URL
@url{https://www.gnu.org/licenses/fdl.html}.
@end quotation

@c @c FIXME[contactingme] Isn't this silly?  My contact information is on the cover.
The author's personal web site @url{http://ageinghacker.net} contains
his contact information.
@end copying


@c Title page
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@titlepage
@title JitterLisp
@subtitle for version @value{VERSION}, updated in @value{UPDATED-MONTH}
@c @author Luca Saiu (@email{positron@@gnu.org}, @url{http://ageinghacker.net})
@c @author Luca Saiu (@url{http://ageinghacker.net})
@c @author Luca Saiu (@email{positron@@gnu.org})
@author Luca Saiu
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage


@c Contents (only actually used for the hardcopy version)
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@contents


@c First page for the Info version, with the main menu
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@ifnottex
@node Top
@top JitterLisp

@c An @insertcopying within the Top node is not explicitly mandated by
@c the GNU Standards, nor even suggested in the Texinfo documentation;
@c however without such a line the Info and HTML versions don't bear any
@c copying information near the beginning.  Notice that the very short
@c introduction about what the software is comes from @copying.
@insertcopying
@end ifnottex

@menu
@c What this software is and how it came to be
* Introduction::                   What JitterLisp is and why you should care.
* Invoking @command{jitterlisp}::  How to use the Lisp system from command line.

Reference documentation
* Lisp data::                      The possible shapes of Lisp objects.
* Lisp language reference::        About the JitterLisp language.
* Lisp language form reference::   The JitterLisp predefined language constructs.
* Lisp library reference::         What predefined globals do.

* Internals::                      How JitterLisp works under the hood.
@c Licenses
@c * GNU General Public License::     How you can share and modify the software.
@c * GNU Free Documentation License:: How you can share and modify this manual.
@ifset includelicenses

Licenses
* GNU General Public License::     How you can share and modify the software.
* GNU Free Documentation License:: How you can share and modify this manual.
@end ifset @c includelicenses

Indices
* Symbol index::                   A link to the documentation for each predefined global
                                   variable.
* Concept index::                  The key words of this manual, with links.

@ifset preview
Temporary stuff, for myself
* Stuff still to be written:: What will be in this manual but is not fully written yet.
* Stuff still to be implemented:: What will exist in the implementation in the future.
@end ifset @c preview
@end menu


@c Introduction
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@c The introduction is written in the first person singular, and uses
@c a more informal tone than the rest.  The clear fracture in style
@c from the introduction to the first chapter is intentional, meant to
@c convey first a more personal, vaguely sentimental touch, and then
@c the reliable terseness of comprehensive documentation.  This
@c distinction should be kept.

@node Introduction
@unnumbered Introduction

JitterLisp is a comparatively simple and efficient Lisp system,
relying on the Jitter virtual machine generator for compiling code.

@menu
* History::                            Why I though the world needed another Lisp.
* Features and influences::            What JitterLisp can do and where it comes from.
* License::                            JitterLisp is released under the GNU GPLv3+.
@end menu

@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node History
@section History
@cindex history
@cindex epsilon
@cindex GNU epsilon
@cindex @ @epsilonzero{} @c The initial forced space is less ugly than the alternative.

@fixme{@pxref{Top,,, jitter, The Jitter Manual}}
The programming language GNU epsilon (@pxref{Top,,, epsilon, The GNU
epsilon Manual}), my main long-term project, has yet to live to my
expectations.  And even if I keep believing in the superiority of its
design, as I firmly do, epsilon's concrete implementation still looks
like a promise waiting to be fulfilled.

@ignore
epsilon is written in itself, and every language form seen by the user
is a syntactic extension rewriting to fundamental forms or, more
typically, to other syntactic extensions.
@end ignore
Among the missed opportunities in epsilon its performance has always
bothered me.  If on one hand there are good technical reasons making
high efficiency more difficult to achieve in epsilon than in other
systems, on the other I conceived its architecture with that end,
amongst others, always in mind, to be competitive with the best.

@fixme{shorten this paragraph: there's no need to talk of
the first failed attempt.}
In late 2015 I decided to implement a direct-threaded virtual machine
for epsilon mostly intended to make interactive usage more convenient
and to reduce bootstrap time.  The speedup I obtained, about 4-6x, was
disappointing.

At that point I made a new repository and started experimenting with
more advanced VM techniques, reading the scientific literature and
adding ideas of my own.  That second more ambitious experiment
succeeded and eventually grew into an independent project, Jitter.

@fixme{Go on.}


@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node Features and influences
@section Features and influences
@cindex feature
@cindex influences
@cindex Common Lisp
@cindex Scheme

@fixme{Write this}


@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node License
@section License

@cindex free software
@cindex GPL
@cindex GNU General Public License
@cindex General Public License
@cindex license, for JitterLisp
@cindex software, license
JitterLisp is free software, distributed under the GNU General Public
License, version 3 or later.
@ifset includelicenses
  @xref{GNU General Public License} for the full text of the software license.
@end ifset @c includelicenses

@cindex free documentation
@cindex FDL
@cindex GNU Free Documentation License
@cindex Free Documentation License
@cindex license, for this manual
@cindex manual, license
This manual is free documentation, distributed under the GNU Free
Documentation License, version 1.3 or later.
@ifset includelicenses
  @xref{GNU Free Documentation License} for the full text of the manual license.
@end ifset @c includelicenses


@c Here starts the actual documentation, written in a more formal
@c tone.  Everything from here on should be in the first person
@c *plural*.

@c Invoking @command{jitterlisp}
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@c This node name is required by the GNU standards.

@node Invoking @command{jitterlisp}
@chapter Invoking @command{jitterlisp}
@cindex invoking
@cindex command line
@cindex @command{jitterlisp}, invoking

@fixme{Write this}


@c Lisp language form reference
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Lisp data
@chapter Lisp data

@fixme{Write this}

@menu
* Types::                                     Every possible shape of data.
* Mapping Lisp data to expressions::          Homoiconicity.
@end menu

@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node Types
@section Types

Every Lisp datum contains a @dfn{value} and a @dfn{type}.  Given a
datum it is always possible to check for its type at run time by means
of some predefined procedure (@pxref{type-checking-procedures}).

Since JitterLisp has, at least currently, no subtyping relation, each
object belongs to exactly one of the following types.  However some
predefined procedures are provided to check whether an object belongs
to one of several related data types; for example @code{closure?} will
accept either an interpreted closure or a compiled closure as a
``closure''.

@anchor{type-table}
@table @emph
@cindex fixnum
@item fixnum

@cindex unique
@item unique type

@cindex character
@item character

@cindex symbol
@item symbol

@cindex interpreted closure
@item interpreted closure

@cindex compiled closure
@item compiled closure
@fixme{An interpreted closure can destructively change to a compiled
closure (but not vice-versa) without changing its identity.}

@cindex primitive
@item primitive

@cindex AST
@cindex Abstract Syntax Tree
@item AST

@cindex cons
@item cons

@cindex macro (type)
@item macro

@cindex primitive macro
@item primitive macro

@end table

@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node Mapping Lisp data to expressions
@section Mapping Lisp data to expressions


@c Lisp language reference
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Lisp language reference
@chapter Lisp language reference

@fixme{Write this}

@menu
* Constants::                                 Some symbols can't be globally
                                              mutated.
@end menu

@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node Constants
@section Constants
@fixme{primitive wrappers are global constants}


@c Lisp language form reference
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Lisp language form reference
@chapter Lisp language form reference

@fixme{Write this.}

The distinction between language and library is not clear-cut in a
system like JitterLisp with strong syntactic abstraction, where almost
all of the language is implemented in itself.  Here I present the
linguistic features which are ``fundamental'' in a conceptual way,
independently from the way they are implemented.

Users interested in distinguishing which individual feature is
implemented in C rather than as a macro may check the tag (``macro''
or ``core macro'', and only occasionally in this chapter ``primitive wrapper'')
in the documentation of each item and then follow the
sources, with the caveat that a few (important) forms are implemented
more than once: first by a temporary definition in C, in order to run
the library and initialize the global state; then, from the library
itself, the feature is re-defined in Lisp in a more general or
powerful way.

@fixme{Write this}

@fixme{lexical scoping}

@fixme{left-to-right}

@fixme{case sensitive}

@fixme{metasyntactic conventions: the dot}

@fixme{erroring out}

@menu
* Language forms::                            The stuff programs are made of.
@end menu

@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node Language forms
@section Language forms
@cindex form, language
@cindex language form

@fixme{Write something}

@fixme{There is a lot of redundancy, by design.  It is desirable to
use the most specific form available, for readability and occasionally
also for efficiency's sake.}

@menu
* Sequencing::               Executing multiple forms one after the other.
* Conditionals::             Evaluating different forms according to the result of another.
* Blocks::                   Establishing local variable bindings.
* Assignment::               Changing existing variable bindings.
* Loops::                    Performing the same action multiple times.
@end menu

@c @@@@@@@@@@@
@node Sequencing
@subsection Sequencing

@cindex sequencing
@fixme{sequencing is nice}

@fixme{``implicit @code{progn}'' or ``implicit @code{begin}''}

@syindex begin
@deffn {macro} begin . forms
@fixme{Write this}
@end deffn

@syindex begin-from-first
@deffn {macro} begin-from-first index . forms
@fixme{Write this}
@end deffn

@syindex begin1
@syindex begin2
@syindex begin3
@syindex begin4
@deffn {macro} begin1 form-1 . other-forms
@deffnx {macro} begin2 form-1 form-2 . other-forms
@deffnx {macro} begin3 form-1 form-2 form-3 . other-forms
@deffnx {macro} begin4 form-1 form-2 form-3 form-4 . other-forms
@fixme{Write this}
@end deffn

@syindex begin-from-last
@deffn {macro} begin-from-last index . forms
@fixme{Write this}
@end deffn

@syindex begin-1
@syindex begin-2
@syindex begin-3
@syindex begin-4
@deffn {macro} begin-1 form-1 . other-forms
@deffnx {macro} begin-2 form-1 form-2 . other-forms
@deffnx {macro} begin-3 form-1 form-2 form-3 . other-forms
@deffnx {macro} begin-4 form-1 form-2 form-3 form-4 . other-forms
@fixme{Write this}

@code{begin-1} is only provided for symmetry, and is functionally
equivalent to @code{begin} with the restriction of requiring at least
one form.
@end deffn


@c @@@@@@@@@@@
@node Conditionals
@subsection Conditionals

@cindex conditional
A @dfn{conditional} form consists in evaluating some @dfn{condition}
form and then decide which form to evaluate next according to the
result of the condition.

@syindex if
@deffn {core macro} if condition then-form . else-forms
@fixme{Write this}
@end deffn

@syindex when
@deffn {macro} when condition . forms
@fixme{Write this}
@end deffn

@syindex unless
@deffn {macro} unless condition . forms
@fixme{Write this}
@end deffn

@syindex cond
@deffn {macro} cond . clauses
@fixme{Write this}
@end deffn

@syindex case
@deffn {macro} case discriminand . clauses
@fixme{Write this}
@end deffn


@c @@@@@@@@@@@
@node Blocks
@subsection Blocks

@cindex block
A @dfn{block} introduces a scope where some variables are locally
bound.

@cindex lexical scoping
@cindex static scoping
@cindex scoping, lexical
Following a lexical scoping discipline a variable binding is visible
in the syntactic region where it has been bound and in every callee,
as long as it is not shadowed by an inner binding for the same
variable.

@anchor{let}
@syindex let
@syindex let*
@syindex letrec
@syindex @r{named} let
@syindex let@r{, named}
@deffn {macro} let bindings . forms
@deffnx {core macro} let* bindings . forms
@deffnx {macro} letrec bindings . forms
@deffnx {macro} let name bindings . forms
@fixme{Write this}

The fourth variant, with @var{name} being a symbol, is listed here out of completeness
but belongs with looping forms; @pxref{named-let,, named @code{let}} for its description.
@end deffn

@anchor{destructuring-bind}
@syindex destructuring-bind
@deffn {macro} destructuring-bind template structure . forms
@fixme{Write this}
@end deffn

@c @@@@@@@@@@@
@node Assignment
@subsection Assignment

@cindex assignment
An @dfn{assignment} operation destructively modifies an existing variable binding.

@syindex set!
@deffn {core macro} set! x . forms
Evaluate the forms @var{forms} left-to-right, then assign the result of the last one
(or @code{#<nothing>} if no forms were given) to the innermost binding for the variable
@var{x}.

Error out if @var{x} is not a symbol, if @var{x} is unbound, or if the binding for
@var{x} is global and constant.
@end deffn

@cindex constant
@anchor{constants}
@fixme{speak about constants}
@quotation Rationale
@fixme{efficiency of compiled code}
@end quotation

@syindex make-constant!
@deffn {primitive wrapper} make-constant! x
@fixme{write.  @var{x} must be a symbol.  It is allowed to be lexically bound as well.
  If called on a globally unbound symbol, it becomes impossible to ever assign
  @emph{or define} it.}
@end deffn

@c @@@@@@@@@@@
@node Loops
@subsection Loops

@cindex loop
A @dfn{loop} form consists in executing the same @dfn{body forms} potentially multiple
times, in sequence.

@syindex while
@deffn {core macro} while guard . forms
@fixme{Write this}
@end deffn

@syindex do
@deffn {macro} do clauses (guard . result-forms) . body-forms
@fixme{Write this}
@end deffn

@syindex dotimes
@deffn {macro} dotimes (x count-form . result-forms) . body-forms
@fixme{Write this}
@end deffn

@syindex dolist
@deffn {macro} dolist (x list-form . result-forms) . body-forms
@fixme{Write this}
@end deffn

@anchor{named-let}
@syindex @r{named} let
@syindex let@r{, named}
@syindex named-let
@deffn {macro} named-let name bindings . forms
@deffnx {macro} let name bindings . forms
@fixme{Write this}

The other, simpler, syntax for @code{let} is described among block
forms: @pxref{let,, @code{let}}.
@end deffn


@c Lisp library reference
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Lisp library reference
@chapter Lisp library reference

@fixme{Write this}

@fixme{Every symbol documented here is a global constant, except for
macros; it is convenient to be able to re-define macros in a
backwards-compatible way}


@menu
* Type checking::                             Testing a datum's type at run time.
* Input and output::                          How to read and write.
@end menu


@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node Type checking
@section Type checking

@cindex type checking
@cindex checking, type
@anchor{type-checking-procedures}


@c @@@@@@@@@@@@@@@@@@@@@@@@@@@
@node Input and output
@section Input and output

@cindex Readline
@cindex I/O
@cindex input
JitterLisp provides very crude I/O functionalities.  Files are not
implemented, so input and output only use the standard input and
standard output, respectively, or the terminal via ReadLine.

@menu
* Character I/O::                     Reading and writing one character at a time.
* Lisp object I/O::                   Reading and writing entire Lisp objects.
@end menu

@c @@@@@@@@@
@node Character I/O
@subsection Character I/O

@cindex character-based input/output
@cindex input/output, character-based

The following functionality provides a thin wrapper over C for reading
or writing one character at a time.

@syindex character-read
@deffn {primitive wrapper} character-read
Read a single character from the terminal and return it, or return @code{#<eof>}
if the input ends.

The implementation is a thin wrapper over the @code{getchar} function from the C library.
@end deffn

@syindex character-display
@deffn {primitive wrapper} character-display c
Print the single character @var{c} to the standard output.  Error out if
@var{c} is not a character object.
@end deffn

@syindex newline
@deffn {primitive wrapper} newline
Print a newline character to the standard output.

If @code{newline} were not already provided in the library it could be defined as:
@example
(define-constant (newline)
  (character-display #\newline))
@end example
@end deffn


@node Lisp object I/O
@subsection Lisp object I/O

@cindex object, Lisp, input/output
@cindex Lisp object, input/output
@cindex input/output, for Lisp objects

@syindex read
@deffn {primitive wrapper} read
@cindex Readline
Read one Lisp object in its input representation from the terminal, using the
Readline functionality if enabled, and return it.
Return @code{#<eof>} if the input ends @emph{before} an object is entered.

The input may span several lines and include whitespace or even Lisp comments, but
the read object must be exactly one.

Error out on syntax error, or if a second object starts after the first.
@end deffn

@syindex display
@deffn {primitive wrapper} display thing
Emit the printed representation of @var{thing} to the standard output.
No newline character or other terminator is added.
@end deffn


@c Internals
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Internals
@chapter Internals

@fixme{Write this}


@ifset includelicenses
@node GNU General Public License
@appendix GNU General Public License
@cindex GPL
@cindex GNU General Public License
@cindex software, license
@cindex license, for JitterLisp
@include gpl.texi

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@cindex FDL
@cindex GNU Free Documentation License
@cindex documentation, license
@cindex manual, license
@cindex license, for this manual
@include fdl.texi
@end ifset @c includelicenses


@c Indices
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Symbol index
@unnumbered Symbol index

What follows is an alphabetical list of predefined JitterLisp globals,
without distinction between core definitions coming from the C code
and library definitions from the library written in Lisp and executed
at startup.

In the same sense the index glosses over the difference in type among
globally defined symbols: some may be procedures or primitive wrappers
and other macros, from either the core or the library.

@cindex symbol index
@cindex index, for symbols
@printindex sy


@node Concept index
@unnumbered Concept index

@cindex concept index
@cindex index, for concepts
@printindex cp


@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@c The actual documentation for the user ends here.
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@ifset preview
@c Stuff still to be written
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Stuff still to be written
@appendix Stuff still to be written

@fixme{Write this}


@c Stuff still to be implemented.
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@node Stuff still to be implemented
@appendix Stuff still to be implemented

@fixme{Write this}
@end ifset


@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@c Footer.
@c @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@bye
